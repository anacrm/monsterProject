{"version":3,"sources":["serviceWorker.js","components/robots.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","robots","id","name","username","email","Card","props","className","alt","src","CardList","robotsCards","map","robot","SearchBox","textoMudou","type","placeholder","onChange","event","target","value","Scroll","style","overflow","border","height","children","App","texto","setState","searchField","filterRobots","filter","robotName","toLowerCase","searchValue","includes","state","fetch","then","response","json","users","this","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UClBOC,EAAS,CACpB,CACEC,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2B,4BC3CIC,EAdF,SAACC,GAEV,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAML,GAAhC,cACpB,6BACI,4BAAKK,EAAMJ,MACX,2BAAII,EAAMF,UCUXM,EAfE,SAAC,GAAgB,IAExBC,EAFuB,EAAbX,OAEWY,KAAI,SAACC,GAC5B,OACI,kBAAC,EAAD,CAAMX,KAAMW,EAAMX,KAAME,MAAOS,EAAMT,MAAOH,GAAIY,EAAMZ,QAI9D,OACI,6BACKU,ICGEG,EAfG,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAMjB,OACI,yBAAKR,UAAU,OACX,2BAAQS,KAAK,SAASC,YAAY,gBAC9BV,UAAU,sDACVW,SARG,SAACC,GACZ,IAAMjB,EAAOiB,EAAMC,OAAOC,MAC1BN,EAAWb,QCKJoB,EATA,SAAChB,GAEZ,OACI,yBAAKiB,MAAS,CAACC,SAAU,SAASC,OAAQ,mBAAoBC,OAAO,UACjEpB,EAAMqB,WCyCHC,E,kDAvCb,aAAe,IAAD,8BACZ,gBAaFb,WAAa,SAACc,GACZ,EAAKC,SAAS,CAAEC,YAAaF,IAE7B,IAAMG,EAAehC,EAAOiC,QAAO,SAACpB,GAClC,IAAMqB,EAAYrB,EAAMX,KAAKiC,cACvBC,EAAcP,EAAMM,cAC1B,OAAOD,EAAUG,SAASD,MAG5B,EAAKN,SAAS,CAAE9B,OAAQgC,KArBxB,EAAKM,MAAQ,CACXtC,OAAQ,GACR+B,YAAa,IAJH,E,gEAQO,IAAD,OAClBQ,MAAM,8CACLC,MAAK,SAAAC,GAAc,OAAOA,EAASC,UACnCF,MAAK,SAAAG,GAAK,OAAE,EAAKb,SAAS,CAAE9B,OAAQ2C,S,+BAgBrC,OACE,yBAAKpC,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWQ,WAAY6B,KAAK7B,aAC5B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUf,OAAQ4C,KAAKN,MAAMtC,e,GAjCnB6C,aCElBC,IAASC,OACP,kBAAC,EAAD,CAAK/C,OAAQA,IAAgBgD,SAASC,eAAe,SPyHjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBZ,MAAK,SAAAa,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.14e05617.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const robots = [\r\n  {\r\n    id: 1,\r\n    name: 'Leanne Graham',\r\n    username: 'Bret',\r\n    email: 'Sincere@april.biz'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Ervin Howell',\r\n    username: 'Antonette',\r\n    email: 'Shanna@melissa.tv'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Clementine Bauch',\r\n    username: 'Samantha',\r\n    email: 'Nathan@yesenia.net'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Patricia Lebsack',\r\n    username: 'Karianne',\r\n    email: 'Julianne.OConner@kory.org'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Chelsey Dietrich',\r\n    username: 'Kamren',\r\n    email: 'Lucio_Hettinger@annie.ca'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'Mrs. Dennis Schulist',\r\n    username: 'Leopoldo_Corkery',\r\n    email: 'Karley_Dach@jasper.info'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Kurtis Weissnat',\r\n    username: 'Elwyn.Skiles',\r\n    email: 'Telly.Hoeger@billy.biz'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Nicholas Runolfsdottir V',\r\n    username: 'Maxime_Nienow',\r\n    email: 'Sherwood@rosamond.me'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Glenna Reichert',\r\n    username: 'Delphine',\r\n    email: 'Chaim_McDermott@dana.io'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Clementina DuBuque',\r\n    username: 'Moriah.Stanton',\r\n    email: 'Rey.Padberg@karina.biz'\r\n  }\r\n];\r\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\r\n    return (\r\n        <div className='tc bg-light-green dib br4 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot' src={`https://robohash.org/${props.id}?200x200`}></img>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card ","import React from 'react'\r\nimport Card from './Card'\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    const robotsCards = robots.map((robot) => {\r\n        return (\r\n            <Card name={robot.name} email={robot.email} id={robot.id}></Card>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {robotsCards}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList ","import React from 'react';\r\n\r\nconst SearchBox = ({ textoMudou }) => {\r\n\r\n    const change = (event) => {\r\n        const name = event.target.value\r\n        textoMudou(name);\r\n    }\r\n    return (\r\n        <div className='pa2'>\r\n            < input type='search' placeholder='search robots'\r\n                className='tc bg-light-green dib br4 pa3 ma2 grow bw2 shadow-5'\r\n                onChange={change}></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n    return (\r\n        <div style = {{overflow: 'scroll',border: ' 1px solid black', height:'500px'  }}>\r\n           {props.children} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll ","import React, { Component } from 'react';\nimport { robots } from '../components/robots'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchField: ''\n    }\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => { return response.json()})\n    .then(users=>this.setState({ robots: users}))\n  }\n\n  textoMudou = (texto) => {\n    this.setState({ searchField: texto })\n\n    const filterRobots = robots.filter((robot) => {\n      const robotName = robot.name.toLowerCase()\n      const searchValue = texto.toLowerCase()\n      return robotName.includes(searchValue)\n    }\n    )\n    this.setState({ robots: filterRobots })\n  }\n\n  render() {\n    return (\n      <div className='tc'>\n        <h1>HoboFriends</h1>\n        <SearchBox textoMudou={this.textoMudou} ></SearchBox>\n        <Scroll>\n        <CardList robots={this.state.robots}></CardList>\n        </Scroll>\n      </div>\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport { robots } from './components/robots'\nimport App from './containers/App'\n\n\nReactDOM.render(\n  <App robots={robots}></App>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}